/**
 * Copyright (c) 2015 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK GIS(tm).
 *
 * Runway SDK GIS(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK GIS(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK GIS(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.system.gis.geo;

@com.runwaysdk.business.ClassSignature(hash = 1053236605)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to Universal.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class UniversalQuery extends com.runwaysdk.query.GeneratedBusinessQuery

{

  public UniversalQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public UniversalQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = new com.runwaysdk.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return com.runwaysdk.system.gis.geo.Universal.CLASS;
  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.Universal.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.Universal.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.Universal.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.Universal.CREATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.Universal.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.Universal.CREATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.gis.geo.UniversalDescriptionQuery.UniversalDescriptionQueryStructIF getDescription()
  {
    return getDescription(null);

  }
 
  public com.runwaysdk.system.gis.geo.UniversalDescriptionQuery.UniversalDescriptionQueryStructIF getDescription(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.Universal.DESCRIPTION);

    return (com.runwaysdk.system.gis.geo.UniversalDescriptionQuery.UniversalDescriptionQueryStructIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.Universal.DESCRIPTION, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.gis.geo.UniversalDescriptionQuery.UniversalDescriptionQueryStructIF getDescription(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.Universal.DESCRIPTION);

    return (com.runwaysdk.system.gis.geo.UniversalDescriptionQuery.UniversalDescriptionQueryStructIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.Universal.DESCRIPTION, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.gis.geo.UniversalDisplayLabelQuery.UniversalDisplayLabelQueryStructIF getDisplayLabel()
  {
    return getDisplayLabel(null);

  }
 
  public com.runwaysdk.system.gis.geo.UniversalDisplayLabelQuery.UniversalDisplayLabelQueryStructIF getDisplayLabel(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.Universal.DISPLAYLABEL);

    return (com.runwaysdk.system.gis.geo.UniversalDisplayLabelQuery.UniversalDisplayLabelQueryStructIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.Universal.DISPLAYLABEL, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.gis.geo.UniversalDisplayLabelQuery.UniversalDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.Universal.DISPLAYLABEL);

    return (com.runwaysdk.system.gis.geo.UniversalDisplayLabelQuery.UniversalDisplayLabelQueryStructIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.Universal.DISPLAYLABEL, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.Universal.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.Universal.ENTITYDOMAIN, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.Universal.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.Universal.ENTITYDOMAIN, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.Universal.ID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.Universal.ID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.Universal.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.Universal.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.Universal.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.Universal.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.Universal.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.Universal.LASTUPDATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.Universal.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.Universal.LASTUPDATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.Universal.LOCKEDBY);

    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.Universal.LOCKEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.Universal.LOCKEDBY);

    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.Universal.LOCKEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.Universal.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.Universal.OWNER, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(com.runwaysdk.system.gis.geo.Universal.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(com.runwaysdk.system.gis.geo.Universal.OWNER, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.Universal.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.Universal.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.Universal.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.Universal.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.Universal.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.Universal.TYPE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getUniversalId()
  {
    return getUniversalId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getUniversalId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.Universal.UNIVERSALID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getUniversalId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(com.runwaysdk.system.gis.geo.Universal.UNIVERSALID, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(com.runwaysdk.system.gis.geo.Universal.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.Universal.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.Universal.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.Universal.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.UsersQuery.UsersQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.Universal.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  protected com.runwaysdk.query.AttributeLocal localFactory( com.runwaysdk.dataaccess.MdAttributeLocalDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdLocalStructDAOIF mdLocalStructIF, String structTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(com.runwaysdk.system.gis.geo.Universal.DESCRIPTION)) 
    {
       return new com.runwaysdk.system.gis.geo.UniversalDescriptionQuery.UniversalDescriptionQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.Universal.DISPLAYLABEL)) 
    {
       return new com.runwaysdk.system.gis.geo.UniversalDisplayLabelQuery.UniversalDisplayLabelQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends Universal> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.BusinessIterator<Universal>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


  public com.runwaysdk.query.Condition allowedIn()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_allowedIn()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition allowedIn(com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    return this.getBusinessQuery().isChildIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_allowedIn(com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(allowedInQuery);
  }

  public com.runwaysdk.query.Condition allowedIn(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(universalQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_allowedIn(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(universalQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition allowedIn(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasParent(universalQuery));
    return this.getBusinessQuery().isChildIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_allowedIn(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasParent(universalQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(allowedInQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_allowedIn()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_allowedIn()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_allowedIn(com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    return this.getBusinessQuery().isNotChildIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_allowedIn(com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(allowedInQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_allowedIn(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(universalQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_allowedIn(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(universalQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_allowedIn(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasParent(universalQuery));
    return this.getBusinessQuery().isNotChildIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_allowedIn(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasParent(universalQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(allowedInQuery);
  }


  public com.runwaysdk.query.Condition superType()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_superType()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition superType(com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    return this.getBusinessQuery().isChildIn(isARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_superType(com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(isARelationshipQuery);
  }

  public com.runwaysdk.query.Condition superType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(universalQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_superType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(universalQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition superType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    isARelationshipQuery.AND(isARelationshipQuery.hasParent(universalQuery));
    return this.getBusinessQuery().isChildIn(isARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_superType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    isARelationshipQuery.AND(isARelationshipQuery.hasParent(universalQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(isARelationshipQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_superType()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_superType()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_superType(com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    return this.getBusinessQuery().isNotChildIn(isARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_superType(com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(isARelationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_superType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(universalQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_superType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(universalQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_superType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    isARelationshipQuery.AND(isARelationshipQuery.hasParent(universalQuery));
    return this.getBusinessQuery().isNotChildIn(isARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_superType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    isARelationshipQuery.AND(isARelationshipQuery.hasParent(universalQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(isARelationshipQuery);
  }


  public com.runwaysdk.query.Condition universalAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalAttributeRoot.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_universalAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalAttributeRoot.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition universalAttributeRoots(com.runwaysdk.system.gis.geo.UniversalAttributeRootQuery universalAttributeRootQuery)
  {
    return this.getBusinessQuery().isChildIn(universalAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_universalAttributeRoots(com.runwaysdk.system.gis.geo.UniversalAttributeRootQuery universalAttributeRootQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(universalAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition universalAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_universalAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition universalAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.system.gis.geo.UniversalAttributeRootQuery universalAttributeRootQuery)
  {
    universalAttributeRootQuery.AND(universalAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.getBusinessQuery().isChildIn(universalAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_universalAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.system.gis.geo.UniversalAttributeRootQuery universalAttributeRootQuery)
  {
    universalAttributeRootQuery.AND(universalAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(universalAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_universalAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalAttributeRoot.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalAttributeRoot.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_universalAttributeRoots(com.runwaysdk.system.gis.geo.UniversalAttributeRootQuery universalAttributeRootQuery)
  {
    return this.getBusinessQuery().isNotChildIn(universalAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalAttributeRoots(com.runwaysdk.system.gis.geo.UniversalAttributeRootQuery universalAttributeRootQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(universalAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_universalAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_universalAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.system.gis.geo.UniversalAttributeRootQuery universalAttributeRootQuery)
  {
    universalAttributeRootQuery.AND(universalAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.getBusinessQuery().isNotChildIn(universalAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.system.gis.geo.UniversalAttributeRootQuery universalAttributeRootQuery)
  {
    universalAttributeRootQuery.AND(universalAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(universalAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition contains()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_contains()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition contains(com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    return this.getBusinessQuery().isParentIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_contains(com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(allowedInQuery);
  }

  public com.runwaysdk.query.Condition contains(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_contains(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition contains(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasChild(universalQuery));
    return this.getBusinessQuery().isParentIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_contains(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasChild(universalQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(allowedInQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_contains()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_contains()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_contains(com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    return this.getBusinessQuery().isNotParentIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_contains(com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(allowedInQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_contains(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_contains(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_contains(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasChild(universalQuery));
    return this.getBusinessQuery().isNotParentIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_contains(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasChild(universalQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(allowedInQuery);
  }


  public com.runwaysdk.query.Condition subType()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_subType()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition subType(com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    return this.getBusinessQuery().isParentIn(isARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_subType(com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(isARelationshipQuery);
  }

  public com.runwaysdk.query.Condition subType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_subType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition subType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    isARelationshipQuery.AND(isARelationshipQuery.hasChild(universalQuery));
    return this.getBusinessQuery().isParentIn(isARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_subType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    isARelationshipQuery.AND(isARelationshipQuery.hasChild(universalQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(isARelationshipQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_subType()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_subType()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_subType(com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    return this.getBusinessQuery().isNotParentIn(isARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_subType(com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(isARelationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_subType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_subType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_subType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    isARelationshipQuery.AND(isARelationshipQuery.hasChild(universalQuery));
    return this.getBusinessQuery().isNotParentIn(isARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_subType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    isARelationshipQuery.AND(isARelationshipQuery.hasChild(universalQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(isARelationshipQuery);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface UniversalQueryReferenceIF extends com.runwaysdk.query.SelectableReference
  {

    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.gis.geo.UniversalDescriptionQuery.UniversalDescriptionQueryStructIF getDescription();
    public com.runwaysdk.system.gis.geo.UniversalDescriptionQuery.UniversalDescriptionQueryStructIF getDescription(String alias);
    public com.runwaysdk.system.gis.geo.UniversalDescriptionQuery.UniversalDescriptionQueryStructIF getDescription(String alias, String displayLabel);
    public com.runwaysdk.system.gis.geo.UniversalDisplayLabelQuery.UniversalDisplayLabelQueryStructIF getDisplayLabel();
    public com.runwaysdk.system.gis.geo.UniversalDisplayLabelQuery.UniversalDisplayLabelQueryStructIF getDisplayLabel(String alias);
    public com.runwaysdk.system.gis.geo.UniversalDisplayLabelQuery.UniversalDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getId();
    public com.runwaysdk.query.SelectableChar getId(String alias);
    public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getUniversalId();
    public com.runwaysdk.query.SelectableChar getUniversalId(String alias);
    public com.runwaysdk.query.SelectableChar getUniversalId(String alias, String displayLabel);

    public com.runwaysdk.query.BasicCondition EQ(com.runwaysdk.system.gis.geo.Universal universal);

    public com.runwaysdk.query.BasicCondition NE(com.runwaysdk.system.gis.geo.Universal universal);


  public com.runwaysdk.query.Condition contains();

  public com.runwaysdk.query.Condition contains(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery);

  public com.runwaysdk.query.Condition contains(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery);


  public com.runwaysdk.query.Condition SUBSELECT_contains();

  public com.runwaysdk.query.Condition SUBSELECT_contains(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery);

  public com.runwaysdk.query.Condition SUBSELECT_contains(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery);


  public com.runwaysdk.query.Condition subType();

  public com.runwaysdk.query.Condition subType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery);

  public com.runwaysdk.query.Condition subType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery);


  public com.runwaysdk.query.Condition SUBSELECT_subType();

  public com.runwaysdk.query.Condition SUBSELECT_subType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery);

  public com.runwaysdk.query.Condition SUBSELECT_subType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery);


  public com.runwaysdk.query.Condition NOT_IN_contains();

  public com.runwaysdk.query.Condition NOT_IN_contains(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery);

  public com.runwaysdk.query.Condition NOT_IN_contains(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_contains();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_contains(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_contains(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery);


  public com.runwaysdk.query.Condition NOT_IN_subType();

  public com.runwaysdk.query.Condition NOT_IN_subType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery);

  public com.runwaysdk.query.Condition NOT_IN_subType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_subType();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_subType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_subType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery);


  public com.runwaysdk.query.Condition allowedIn();
  public com.runwaysdk.query.Condition allowedIn(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery);

  public com.runwaysdk.query.Condition allowedIn(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery);


  public com.runwaysdk.query.Condition SUBSELECT_allowedIn();
  public com.runwaysdk.query.Condition SUBSELECT_allowedIn(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery);

  public com.runwaysdk.query.Condition SUBSELECT_allowedIn(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery);


  public com.runwaysdk.query.Condition superType();
  public com.runwaysdk.query.Condition superType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery);

  public com.runwaysdk.query.Condition superType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery);


  public com.runwaysdk.query.Condition SUBSELECT_superType();
  public com.runwaysdk.query.Condition SUBSELECT_superType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery);

  public com.runwaysdk.query.Condition SUBSELECT_superType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery);


  public com.runwaysdk.query.Condition universalAttributeRoots();
  public com.runwaysdk.query.Condition universalAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery);

  public com.runwaysdk.query.Condition universalAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.system.gis.geo.UniversalAttributeRootQuery universalAttributeRootQuery);


  public com.runwaysdk.query.Condition SUBSELECT_universalAttributeRoots();
  public com.runwaysdk.query.Condition SUBSELECT_universalAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery);

  public com.runwaysdk.query.Condition SUBSELECT_universalAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.system.gis.geo.UniversalAttributeRootQuery universalAttributeRootQuery);


  public com.runwaysdk.query.Condition NOT_IN_allowedIn();
  public com.runwaysdk.query.Condition NOT_IN_allowedIn(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery);

  public com.runwaysdk.query.Condition NOT_IN_allowedIn(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_allowedIn();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_allowedIn(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_allowedIn(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery);


  public com.runwaysdk.query.Condition NOT_IN_superType();
  public com.runwaysdk.query.Condition NOT_IN_superType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery);

  public com.runwaysdk.query.Condition NOT_IN_superType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_superType();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_superType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_superType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery);


  public com.runwaysdk.query.Condition NOT_IN_universalAttributeRoots();
  public com.runwaysdk.query.Condition NOT_IN_universalAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery);

  public com.runwaysdk.query.Condition NOT_IN_universalAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.system.gis.geo.UniversalAttributeRootQuery universalAttributeRootQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalAttributeRoots();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.system.gis.geo.UniversalAttributeRootQuery universalAttributeRootQuery);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class UniversalQueryReference extends com.runwaysdk.query.AttributeTerm
 implements UniversalQueryReferenceIF

  {

  public UniversalQueryReference(com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.runwaysdk.query.BasicCondition EQ(com.runwaysdk.system.gis.geo.Universal universal)
    {
      if(universal == null) return this.EQ((java.lang.String)null);
      return this.EQ(universal.getId());
    }

    public com.runwaysdk.query.BasicCondition NE(com.runwaysdk.system.gis.geo.Universal universal)
    {
      if(universal == null) return this.NE((java.lang.String)null);
      return this.NE(universal.getId());
    }

  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(com.runwaysdk.system.gis.geo.Universal.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(com.runwaysdk.system.gis.geo.Universal.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.Universal.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.Universal.CREATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.gis.geo.UniversalDescriptionQuery.UniversalDescriptionQueryStructIF getDescription()
  {
    return getDescription(null);

  }
 
  public com.runwaysdk.system.gis.geo.UniversalDescriptionQuery.UniversalDescriptionQueryStructIF getDescription(String alias)
  {
    return (com.runwaysdk.system.gis.geo.UniversalDescriptionQuery.UniversalDescriptionQueryStructIF)this.attributeFactory(com.runwaysdk.system.gis.geo.Universal.DESCRIPTION, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, null);

  }
 
  public com.runwaysdk.system.gis.geo.UniversalDescriptionQuery.UniversalDescriptionQueryStructIF getDescription(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.gis.geo.UniversalDescriptionQuery.UniversalDescriptionQueryStructIF)this.attributeFactory(com.runwaysdk.system.gis.geo.Universal.DESCRIPTION, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, displayLabel);

  }
  public com.runwaysdk.system.gis.geo.UniversalDisplayLabelQuery.UniversalDisplayLabelQueryStructIF getDisplayLabel()
  {
    return getDisplayLabel(null);

  }
 
  public com.runwaysdk.system.gis.geo.UniversalDisplayLabelQuery.UniversalDisplayLabelQueryStructIF getDisplayLabel(String alias)
  {
    return (com.runwaysdk.system.gis.geo.UniversalDisplayLabelQuery.UniversalDisplayLabelQueryStructIF)this.attributeFactory(com.runwaysdk.system.gis.geo.Universal.DISPLAYLABEL, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, null);

  }
 
  public com.runwaysdk.system.gis.geo.UniversalDisplayLabelQuery.UniversalDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.gis.geo.UniversalDisplayLabelQuery.UniversalDisplayLabelQueryStructIF)this.attributeFactory(com.runwaysdk.system.gis.geo.Universal.DISPLAYLABEL, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.Universal.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.Universal.ENTITYDOMAIN,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.Universal.ID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.Universal.ID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.Universal.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.Universal.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(com.runwaysdk.system.gis.geo.Universal.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(com.runwaysdk.system.gis.geo.Universal.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.Universal.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.Universal.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.Universal.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.Universal.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.Universal.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.Universal.OWNER,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(com.runwaysdk.system.gis.geo.Universal.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(com.runwaysdk.system.gis.geo.Universal.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.Universal.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.Universal.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.Universal.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.Universal.TYPE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getUniversalId()
  {
    return getUniversalId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getUniversalId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.Universal.UNIVERSALID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getUniversalId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.Universal.UNIVERSALID, alias, displayLabel);

  }

  public com.runwaysdk.query.Condition contains()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_contains()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition contains(com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    return this.isParentIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_contains(com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    return this.isParentIn_SUBSELECT(allowedInQuery);
  }

  public com.runwaysdk.query.Condition contains(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_contains(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition contains(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasChild(universalQuery));
    return this.isParentIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_contains(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasChild(universalQuery));
    return this.isParentIn_SUBSELECT(allowedInQuery);
  }


  public com.runwaysdk.query.Condition subType()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_subType()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition subType(com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    return this.isParentIn(isARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_subType(com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    return this.isParentIn_SUBSELECT(isARelationshipQuery);
  }

  public com.runwaysdk.query.Condition subType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_subType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition subType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    isARelationshipQuery.AND(isARelationshipQuery.hasChild(universalQuery));
    return this.isParentIn(isARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_subType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    isARelationshipQuery.AND(isARelationshipQuery.hasChild(universalQuery));
    return this.isParentIn_SUBSELECT(isARelationshipQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_contains()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_contains()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_contains(com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    return this.isNotParentIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_contains(com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    return this.isNotParentIn_SUBSELECT(allowedInQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_contains(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_contains(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_contains(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasChild(universalQuery));
    return this.isNotParentIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_contains(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasChild(universalQuery));
    return this.isNotParentIn_SUBSELECT(allowedInQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_subType()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_subType()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_subType(com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    return this.isNotParentIn(isARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_subType(com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    return this.isNotParentIn_SUBSELECT(isARelationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_subType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_subType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(universalQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_subType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    isARelationshipQuery.AND(isARelationshipQuery.hasChild(universalQuery));
    return this.isNotParentIn(isARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_subType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    isARelationshipQuery.AND(isARelationshipQuery.hasChild(universalQuery));
    return this.isNotParentIn_SUBSELECT(isARelationshipQuery);
  }


  public com.runwaysdk.query.Condition allowedIn()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_allowedIn()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition allowedIn(com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    return this.isChildIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_allowedIn(com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    return this.isChildIn_SUBSELECT(allowedInQuery);
  }

  public com.runwaysdk.query.Condition allowedIn(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(universalQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_allowedIn(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(universalQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition allowedIn(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasParent(universalQuery));
    return this.isChildIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_allowedIn(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasParent(universalQuery));
    return this.isChildIn_SUBSELECT(allowedInQuery);
  }


  public com.runwaysdk.query.Condition superType()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_superType()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition superType(com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    return this.isChildIn(isARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_superType(com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    return this.isChildIn_SUBSELECT(isARelationshipQuery);
  }

  public com.runwaysdk.query.Condition superType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(universalQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_superType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(universalQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition superType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    isARelationshipQuery.AND(isARelationshipQuery.hasParent(universalQuery));
    return this.isChildIn(isARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_superType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    isARelationshipQuery.AND(isARelationshipQuery.hasParent(universalQuery));
    return this.isChildIn_SUBSELECT(isARelationshipQuery);
  }


  public com.runwaysdk.query.Condition universalAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalAttributeRoot.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_universalAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalAttributeRoot.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition universalAttributeRoots(com.runwaysdk.system.gis.geo.UniversalAttributeRootQuery universalAttributeRootQuery)
  {
    return this.isChildIn(universalAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_universalAttributeRoots(com.runwaysdk.system.gis.geo.UniversalAttributeRootQuery universalAttributeRootQuery)
  {
    return this.isChildIn_SUBSELECT(universalAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition universalAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_universalAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition universalAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.system.gis.geo.UniversalAttributeRootQuery universalAttributeRootQuery)
  {
    universalAttributeRootQuery.AND(universalAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.isChildIn(universalAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_universalAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.system.gis.geo.UniversalAttributeRootQuery universalAttributeRootQuery)
  {
    universalAttributeRootQuery.AND(universalAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.isChildIn_SUBSELECT(universalAttributeRootQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_allowedIn()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_allowedIn()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_allowedIn(com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    return this.isNotChildIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_allowedIn(com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    return this.isNotChildIn_SUBSELECT(allowedInQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_allowedIn(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(universalQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_allowedIn(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(universalQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_allowedIn(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasParent(universalQuery));
    return this.isNotChildIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_allowedIn(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasParent(universalQuery));
    return this.isNotChildIn_SUBSELECT(allowedInQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_superType()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_superType()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_superType(com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    return this.isNotChildIn(isARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_superType(com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    return this.isNotChildIn_SUBSELECT(isARelationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_superType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(universalQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_superType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.IsARelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(universalQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_superType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    isARelationshipQuery.AND(isARelationshipQuery.hasParent(universalQuery));
    return this.isNotChildIn(isARelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_superType(com.runwaysdk.system.gis.geo.UniversalQuery universalQuery, com.runwaysdk.system.gis.geo.IsARelationshipQuery isARelationshipQuery)
  {
    isARelationshipQuery.AND(isARelationshipQuery.hasParent(universalQuery));
    return this.isNotChildIn_SUBSELECT(isARelationshipQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_universalAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalAttributeRoot.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalAttributeRoots()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalAttributeRoot.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_universalAttributeRoots(com.runwaysdk.system.gis.geo.UniversalAttributeRootQuery universalAttributeRootQuery)
  {
    return this.isNotChildIn(universalAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalAttributeRoots(com.runwaysdk.system.gis.geo.UniversalAttributeRootQuery universalAttributeRootQuery)
  {
    return this.isNotChildIn_SUBSELECT(universalAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_universalAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(com.runwaysdk.system.gis.geo.UniversalAttributeRoot.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mdAttributeTermQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_universalAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.system.gis.geo.UniversalAttributeRootQuery universalAttributeRootQuery)
  {
    universalAttributeRootQuery.AND(universalAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.isNotChildIn(universalAttributeRootQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_universalAttributeRoots(com.runwaysdk.system.metadata.MdAttributeTermQuery mdAttributeTermQuery, com.runwaysdk.system.gis.geo.UniversalAttributeRootQuery universalAttributeRootQuery)
  {
    universalAttributeRootQuery.AND(universalAttributeRootQuery.hasParent(mdAttributeTermQuery));
    return this.isNotChildIn_SUBSELECT(universalAttributeRootQuery);
  }

  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(com.runwaysdk.system.gis.geo.Universal.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.Universal.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.Universal.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.Universal.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.UsersQuery.UsersQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.Universal.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  protected com.runwaysdk.query.AttributeLocal localFactory( com.runwaysdk.dataaccess.MdAttributeLocalDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdLocalStructDAOIF mdLocalStructIF, String structTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(com.runwaysdk.system.gis.geo.Universal.DESCRIPTION)) 
    {
       return new com.runwaysdk.system.gis.geo.UniversalDescriptionQuery.UniversalDescriptionQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.Universal.DISPLAYLABEL)) 
    {
       return new com.runwaysdk.system.gis.geo.UniversalDisplayLabelQuery.UniversalDisplayLabelQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }

/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface UniversalQueryMultiReferenceIF extends com.runwaysdk.query.SelectableMultiReference
  {

    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.gis.geo.UniversalDescriptionQuery.UniversalDescriptionQueryStructIF getDescription();
    public com.runwaysdk.system.gis.geo.UniversalDescriptionQuery.UniversalDescriptionQueryStructIF getDescription(String alias);
    public com.runwaysdk.system.gis.geo.UniversalDescriptionQuery.UniversalDescriptionQueryStructIF getDescription(String alias, String displayLabel);
    public com.runwaysdk.system.gis.geo.UniversalDisplayLabelQuery.UniversalDisplayLabelQueryStructIF getDisplayLabel();
    public com.runwaysdk.system.gis.geo.UniversalDisplayLabelQuery.UniversalDisplayLabelQueryStructIF getDisplayLabel(String alias);
    public com.runwaysdk.system.gis.geo.UniversalDisplayLabelQuery.UniversalDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getId();
    public com.runwaysdk.query.SelectableChar getId(String alias);
    public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getUniversalId();
    public com.runwaysdk.query.SelectableChar getUniversalId(String alias);
    public com.runwaysdk.query.SelectableChar getUniversalId(String alias, String displayLabel);

    public com.runwaysdk.query.Condition containsAny(com.runwaysdk.system.gis.geo.Universal ... universal);
    public com.runwaysdk.query.Condition notContainsAny(com.runwaysdk.system.gis.geo.Universal ... universal);
    public com.runwaysdk.query.Condition containsAll(com.runwaysdk.system.gis.geo.Universal ... universal);
    public com.runwaysdk.query.Condition notContainsAll(com.runwaysdk.system.gis.geo.Universal ... universal);
    public com.runwaysdk.query.Condition containsExactly(com.runwaysdk.system.gis.geo.Universal ... universal);
  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class UniversalQueryMultiReference extends com.runwaysdk.query.AttributeMultiTerm
 implements UniversalQueryMultiReferenceIF

  {

  public UniversalQueryMultiReference(com.runwaysdk.dataaccess.MdAttributeMultiReferenceDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, String mdMultiReferenceTableName, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, mdMultiReferenceTableName, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }



    public com.runwaysdk.query.Condition containsAny(com.runwaysdk.system.gis.geo.Universal ... universal)  {

      String[] itemIdArray = new String[universal.length]; 

      for (int i=0; i<universal.length; i++)
      {
        itemIdArray[i] = universal[i].getId();
      }

      return this.containsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAny(com.runwaysdk.system.gis.geo.Universal ... universal)  {

      String[] itemIdArray = new String[universal.length]; 

      for (int i=0; i<universal.length; i++)
      {
        itemIdArray[i] = universal[i].getId();
      }

      return this.notContainsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsAll(com.runwaysdk.system.gis.geo.Universal ... universal)  {

      String[] itemIdArray = new String[universal.length]; 

      for (int i=0; i<universal.length; i++)
      {
        itemIdArray[i] = universal[i].getId();
      }

      return this.containsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAll(com.runwaysdk.system.gis.geo.Universal ... universal)  {

      String[] itemIdArray = new String[universal.length]; 

      for (int i=0; i<universal.length; i++)
      {
        itemIdArray[i] = universal[i].getId();
      }

      return this.notContainsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsExactly(com.runwaysdk.system.gis.geo.Universal ... universal)  {

      String[] itemIdArray = new String[universal.length]; 

      for (int i=0; i<universal.length; i++)
      {
        itemIdArray[i] = universal[i].getId();
      }

      return this.containsExactly(itemIdArray);
  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(com.runwaysdk.system.gis.geo.Universal.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(com.runwaysdk.system.gis.geo.Universal.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.Universal.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.Universal.CREATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.gis.geo.UniversalDescriptionQuery.UniversalDescriptionQueryStructIF getDescription()
  {
    return getDescription(null);

  }
 
  public com.runwaysdk.system.gis.geo.UniversalDescriptionQuery.UniversalDescriptionQueryStructIF getDescription(String alias)
  {
    return (com.runwaysdk.system.gis.geo.UniversalDescriptionQuery.UniversalDescriptionQueryStructIF)this.attributeFactory(com.runwaysdk.system.gis.geo.Universal.DESCRIPTION, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, null);

  }
 
  public com.runwaysdk.system.gis.geo.UniversalDescriptionQuery.UniversalDescriptionQueryStructIF getDescription(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.gis.geo.UniversalDescriptionQuery.UniversalDescriptionQueryStructIF)this.attributeFactory(com.runwaysdk.system.gis.geo.Universal.DESCRIPTION, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, displayLabel);

  }
  public com.runwaysdk.system.gis.geo.UniversalDisplayLabelQuery.UniversalDisplayLabelQueryStructIF getDisplayLabel()
  {
    return getDisplayLabel(null);

  }
 
  public com.runwaysdk.system.gis.geo.UniversalDisplayLabelQuery.UniversalDisplayLabelQueryStructIF getDisplayLabel(String alias)
  {
    return (com.runwaysdk.system.gis.geo.UniversalDisplayLabelQuery.UniversalDisplayLabelQueryStructIF)this.attributeFactory(com.runwaysdk.system.gis.geo.Universal.DISPLAYLABEL, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, null);

  }
 
  public com.runwaysdk.system.gis.geo.UniversalDisplayLabelQuery.UniversalDisplayLabelQueryStructIF getDisplayLabel(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.gis.geo.UniversalDisplayLabelQuery.UniversalDisplayLabelQueryStructIF)this.attributeFactory(com.runwaysdk.system.gis.geo.Universal.DISPLAYLABEL, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.Universal.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.Universal.ENTITYDOMAIN,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.Universal.ID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.Universal.ID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.Universal.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.Universal.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(com.runwaysdk.system.gis.geo.Universal.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(com.runwaysdk.system.gis.geo.Universal.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.Universal.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.Universal.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.Universal.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.Universal.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.Universal.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(com.runwaysdk.system.gis.geo.Universal.OWNER,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(com.runwaysdk.system.gis.geo.Universal.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(com.runwaysdk.system.gis.geo.Universal.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.Universal.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.Universal.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.Universal.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.Universal.TYPE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getUniversalId()
  {
    return getUniversalId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getUniversalId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.Universal.UNIVERSALID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getUniversalId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(com.runwaysdk.system.gis.geo.Universal.UNIVERSALID, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(com.runwaysdk.system.gis.geo.Universal.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.Universal.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.Universal.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.Universal.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.UsersQuery.UsersQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.Universal.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  protected com.runwaysdk.query.AttributeLocal localFactory( com.runwaysdk.dataaccess.MdAttributeLocalDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdLocalStructDAOIF mdLocalStructIF, String structTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(com.runwaysdk.system.gis.geo.Universal.DESCRIPTION)) 
    {
       return new com.runwaysdk.system.gis.geo.UniversalDescriptionQuery.UniversalDescriptionQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(com.runwaysdk.system.gis.geo.Universal.DISPLAYLABEL)) 
    {
       return new com.runwaysdk.system.gis.geo.UniversalDisplayLabelQuery.UniversalDisplayLabelQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }
}
