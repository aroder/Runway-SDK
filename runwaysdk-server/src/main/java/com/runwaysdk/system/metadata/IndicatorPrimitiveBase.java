package com.runwaysdk.system.metadata;

@com.runwaysdk.business.ClassSignature(hash = 1128223183)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to IndicatorPrimitive.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class IndicatorPrimitiveBase extends com.runwaysdk.system.metadata.IndicatorElement
{
  public final static String CLASS = "com.runwaysdk.system.metadata.IndicatorPrimitive";
  public static java.lang.String INDICATORFUNCTION = "indicatorFunction";
  public static java.lang.String MDATTRIBUTEPRIMITIVE = "mdAttributePrimitive";
  private static final long serialVersionUID = 1128223183;
  
  public IndicatorPrimitiveBase()
  {
    super();
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<com.runwaysdk.system.metadata.IndicatorAggregateFunction> getIndicatorFunction()
  {
    return (java.util.List<com.runwaysdk.system.metadata.IndicatorAggregateFunction>) getEnumValues(INDICATORFUNCTION);
  }
  
  public void addIndicatorFunction(com.runwaysdk.system.metadata.IndicatorAggregateFunction value)
  {
    if(value != null)
    {
      addEnumItem(INDICATORFUNCTION, value.getId());
    }
  }
  
  public void removeIndicatorFunction(com.runwaysdk.system.metadata.IndicatorAggregateFunction value)
  {
    if(value != null)
    {
      removeEnumItem(INDICATORFUNCTION, value.getId());
    }
  }
  
  public void clearIndicatorFunction()
  {
    clearEnum(INDICATORFUNCTION);
  }
  
  public void validateIndicatorFunction()
  {
    this.validateAttribute(INDICATORFUNCTION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF getIndicatorFunctionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.IndicatorPrimitive.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF)mdClassIF.definesAttribute(INDICATORFUNCTION);
  }
  
  public com.runwaysdk.system.metadata.MdAttributePrimitive getMdAttributePrimitive()
  {
    if (getValue(MDATTRIBUTEPRIMITIVE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdAttributePrimitive.get(getValue(MDATTRIBUTEPRIMITIVE));
    }
  }
  
  public String getMdAttributePrimitiveId()
  {
    return getValue(MDATTRIBUTEPRIMITIVE);
  }
  
  public void validateMdAttributePrimitive()
  {
    this.validateAttribute(MDATTRIBUTEPRIMITIVE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getMdAttributePrimitiveMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.IndicatorPrimitive.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(MDATTRIBUTEPRIMITIVE);
  }
  
  public void setMdAttributePrimitive(com.runwaysdk.system.metadata.MdAttributePrimitive value)
  {
    if(value == null)
    {
      setValue(MDATTRIBUTEPRIMITIVE, "");
    }
    else
    {
      setValue(MDATTRIBUTEPRIMITIVE, value.getId());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static IndicatorPrimitive get(String id)
  {
    return (IndicatorPrimitive) com.runwaysdk.business.Business.get(id);
  }
  
  public static IndicatorPrimitive getByKey(String key)
  {
    return (IndicatorPrimitive) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static IndicatorPrimitive lock(java.lang.String id)
  {
    IndicatorPrimitive _instance = IndicatorPrimitive.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static IndicatorPrimitive unlock(java.lang.String id)
  {
    IndicatorPrimitive _instance = IndicatorPrimitive.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
