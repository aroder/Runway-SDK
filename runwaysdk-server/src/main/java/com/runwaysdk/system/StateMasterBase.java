/*******************************************************************************
 * Copyright (c) 2013 TerraFrame, Inc. All rights reserved. 
 * 
 * This file is part of Runway SDK(tm).
 * 
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package com.runwaysdk.system;

@com.runwaysdk.business.ClassSignature(hash = 481307199)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to StateMaster.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class StateMasterBase extends com.runwaysdk.system.metadata.Metadata
{
  public final static String CLASS = "com.runwaysdk.system.StateMaster";
  public static java.lang.String DISPLAYLABEL = "displayLabel";
  private com.runwaysdk.business.Struct displayLabel = null;
  
  public static java.lang.String ENTRYSTATE = "entryState";
  public static java.lang.String STATENAME = "stateName";
  private static final long serialVersionUID = 481307199;
  
  public StateMasterBase()
  {
    super();
    displayLabel = super.getStruct("displayLabel");
  }
  
  public com.runwaysdk.system.metadata.MetadataDisplayLabel getDisplayLabel()
  {
    return (com.runwaysdk.system.metadata.MetadataDisplayLabel) displayLabel;
  }
  
  public void validateDisplayLabel()
  {
    this.validateAttribute(DISPLAYLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDisplayLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.StateMaster.CLASS);
    return mdClassIF.definesAttribute(DISPLAYLABEL);
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<com.runwaysdk.system.AllEntryEnumeration> getEntryState()
  {
    return (java.util.List<com.runwaysdk.system.AllEntryEnumeration>) getEnumValues(ENTRYSTATE);
  }
  
  public void addEntryState(com.runwaysdk.system.AllEntryEnumeration value)
  {
    if(value != null)
    {
      addEnumItem(ENTRYSTATE, value.getId());
    }
  }
  
  public void removeEntryState(com.runwaysdk.system.AllEntryEnumeration value)
  {
    if(value != null)
    {
      removeEnumItem(ENTRYSTATE, value.getId());
    }
  }
  
  public void clearEntryState()
  {
    clearEnum(ENTRYSTATE);
  }
  
  public void validateEntryState()
  {
    this.validateAttribute(ENTRYSTATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getEntryStateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.StateMaster.CLASS);
    return mdClassIF.definesAttribute(ENTRYSTATE);
  }
  
  public String getStateName()
  {
    return getValue(STATENAME);
  }
  
  public void validateStateName()
  {
    this.validateAttribute(STATENAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getStateNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.StateMaster.CLASS);
    return mdClassIF.definesAttribute(STATENAME);
  }
  
  public void setStateName(String value)
  {
    if(value == null)
    {
      setValue(STATENAME, "");
    }
    else
    {
      setValue(STATENAME, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public com.runwaysdk.system.Transition addSink(com.runwaysdk.system.StateMaster stateMaster)
  {
    return (com.runwaysdk.system.Transition) addChild(stateMaster, com.runwaysdk.system.Transition.CLASS);
  }
  
  public void removeSink(com.runwaysdk.system.StateMaster stateMaster)
  {
    removeAllChildren(stateMaster, com.runwaysdk.system.Transition.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.StateMaster> getAllSink()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.StateMaster>) getChildren(com.runwaysdk.system.Transition.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.Transition> getAllSinkRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.Transition>) getChildRelationships(com.runwaysdk.system.Transition.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.system.Transition getSinkRel(com.runwaysdk.system.StateMaster stateMaster)
  {
    com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.Transition> iterator = (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.Transition>) getRelationshipsWithChild(stateMaster, com.runwaysdk.system.Transition.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public com.runwaysdk.system.Transition addSource(com.runwaysdk.system.StateMaster stateMaster)
  {
    return (com.runwaysdk.system.Transition) addParent(stateMaster, com.runwaysdk.system.Transition.CLASS);
  }
  
  public void removeSource(com.runwaysdk.system.StateMaster stateMaster)
  {
    removeAllParents(stateMaster, com.runwaysdk.system.Transition.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.StateMaster> getAllSource()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.StateMaster>) getParents(com.runwaysdk.system.Transition.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.Transition> getAllSourceRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.Transition>) getParentRelationships(com.runwaysdk.system.Transition.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.system.Transition getSourceRel(com.runwaysdk.system.StateMaster stateMaster)
  {
    com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.Transition> iterator = (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.Transition>) getRelationshipsWithParent(stateMaster, com.runwaysdk.system.Transition.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public static StateMaster get(String id)
  {
    return (StateMaster) com.runwaysdk.business.Business.get(id);
  }
  
  public static StateMaster getByKey(String key)
  {
    return (StateMaster) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static StateMaster lock(java.lang.String id)
  {
    StateMaster _instance = StateMaster.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static StateMaster unlock(java.lang.String id)
  {
    StateMaster _instance = StateMaster.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return this.getClassDisplayLabel();
    }
  }
}
