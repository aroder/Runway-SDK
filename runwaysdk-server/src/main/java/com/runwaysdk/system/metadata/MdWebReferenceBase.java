package com.runwaysdk.system.metadata;

@com.runwaysdk.business.ClassSignature(hash = -1694143040)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MdWebReference.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class MdWebReferenceBase extends com.runwaysdk.system.metadata.MdWebAttribute
{
  public final static String CLASS = "com.runwaysdk.system.metadata.MdWebReference";
  public static java.lang.String SHOWONSEARCH = "showOnSearch";
  private static final long serialVersionUID = -1694143040;
  
  public MdWebReferenceBase()
  {
    super();
  }
  
  public Boolean getShowOnSearch()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(SHOWONSEARCH));
  }
  
  public void validateShowOnSearch()
  {
    this.validateAttribute(SHOWONSEARCH);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getShowOnSearchMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.metadata.MdWebReference.CLASS);
    return mdClassIF.definesAttribute(SHOWONSEARCH);
  }
  
  public void setShowOnSearch(Boolean value)
  {
    if(value == null)
    {
      setValue(SHOWONSEARCH, "");
    }
    else
    {
      setValue(SHOWONSEARCH, java.lang.Boolean.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static MdWebReference get(String id)
  {
    return (MdWebReference) com.runwaysdk.business.Business.get(id);
  }
  
  public static MdWebReference getByKey(String key)
  {
    return (MdWebReference) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static MdWebReference lock(java.lang.String id)
  {
    MdWebReference _instance = MdWebReference.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static MdWebReference unlock(java.lang.String id)
  {
    MdWebReference _instance = MdWebReference.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
