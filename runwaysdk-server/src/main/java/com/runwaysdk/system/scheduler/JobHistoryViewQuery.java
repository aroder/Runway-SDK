package com.runwaysdk.system.scheduler;

import com.runwaysdk.query.QueryFactory;
import com.runwaysdk.query.Selectable;
import com.runwaysdk.query.SelectablePrimitive;



/**
 *
 * @author Autogenerated by RunwaySDK
 */
public class JobHistoryViewQuery extends com.runwaysdk.system.scheduler.JobHistoryViewQueryBase 
{

  protected JobHistoryQuery historyQ;
  protected JobSnapshotQuery snapshotQ;
  protected ExecutableJobQuery execJobQ;
  protected JobHistoryRecordQuery jobHistoryRecordQ;
  
  public JobHistoryViewQuery(com.runwaysdk.query.QueryFactory queryFactory)
  {
    super(queryFactory);
    
    this.historyQ = new JobHistoryQuery(queryFactory);
    this.snapshotQ = new JobSnapshotQuery(queryFactory);
    this.execJobQ = new ExecutableJobQuery(queryFactory);
    this.jobHistoryRecordQ = new JobHistoryRecordQuery(queryFactory);
    
    this.buildQuery(new DefaultJobHistoryViewBuilder(queryFactory));
  }
  
  public JobHistoryViewQuery(QueryFactory queryFactory, String sortAttribute, Boolean isAscending, Integer pageSize, Integer pageNumber) {
    super(queryFactory);
    
    this.historyQ = new JobHistoryQuery(queryFactory);
    this.snapshotQ = new JobSnapshotQuery(queryFactory);
    this.execJobQ = new ExecutableJobQuery(queryFactory);
    this.jobHistoryRecordQ = new JobHistoryRecordQuery(queryFactory);
    
    this.buildQuery(new DefaultJobHistoryViewBuilder(queryFactory));
    
    if (sortAttribute != null && !(sortAttribute.equals(""))) {
      Selectable attr = this.getSelectable(sortAttribute, null, null);
      
      if (attr != null && attr instanceof SelectablePrimitive) {
        if (isAscending) {
          this.ORDER_BY_ASC((SelectablePrimitive) attr);
        }
        else {
          this.ORDER_BY_DESC((SelectablePrimitive) attr);
        }
      }
    }
    this.restrictRows(pageSize, pageNumber);
  }

  public JobHistoryViewQuery(com.runwaysdk.query.QueryFactory queryFactory, com.runwaysdk.query.ViewQueryBuilder viewQueryBuilder)
  {
    super(queryFactory, viewQueryBuilder);
  }

  class DefaultJobHistoryViewBuilder extends com.runwaysdk.query.ViewQueryBuilder
  {
    public DefaultJobHistoryViewBuilder(com.runwaysdk.query.QueryFactory queryFactory)
    {
      super(queryFactory);
    }

    protected JobHistoryViewQuery getViewQuery()
    {
      return (JobHistoryViewQuery)super.getViewQuery();
    }

    /**
     * build the select clause
     */
    protected void buildSelectClause()
    {
      JobHistoryViewQuery q = this.getViewQuery();
      
      q.map(JobHistoryView.CREATEDATE, historyQ.getCreateDate());
      q.map(JobHistoryView.HISTORYCOMMENT, historyQ.getHistoryComment().localize());
      q.map(JobHistoryView.HISTORYINFORMATION, historyQ.getHistoryInformation().localize());
      q.map(JobHistoryView.DESCRIPTION, execJobQ.getDescription().localize());
      q.map(JobHistoryView.JOBID, execJobQ.getJobId());
      q.map(JobHistoryView.CANCELABLE, snapshotQ.getCancelable());
      q.map(JobHistoryView.CANCELED, snapshotQ.getCanceled());
      q.map(JobHistoryView.COMPLETED, snapshotQ.getCompleted());
      q.map(JobHistoryView.CRONEXPRESSION, snapshotQ.getCronExpression());
      q.map(JobHistoryView.STARTTIME, snapshotQ.getStartTime());
      q.map(JobHistoryView.ENDTIME, snapshotQ.getEndTime());
      q.map(JobHistoryView.JOBOPERATION, snapshotQ.getJobOperation());
      q.map(JobHistoryView.LASTRUN, snapshotQ.getLastRun());
      q.map(JobHistoryView.MAXRETRIES, snapshotQ.getMaxRetries());
      q.map(JobHistoryView.PAUSEABLE, snapshotQ.getPauseable());
      q.map(JobHistoryView.PAUSED, snapshotQ.getPaused());
      q.map(JobHistoryView.REMOVEONCOMPLETE, snapshotQ.getRemoveOnComplete());
      q.map(JobHistoryView.REPEATED, snapshotQ.getRepeated());
      q.map(JobHistoryView.RETRIES, snapshotQ.getRetries());
      q.map(JobHistoryView.RUNNING, snapshotQ.getRunning());
      q.map(JobHistoryView.STARTONCREATE, snapshotQ.getStartOnCreate());
      q.map(JobHistoryView.TIMEOUT, snapshotQ.getTimeout());
      q.map(JobHistoryView.WORKPROGRESS, snapshotQ.getWorkProgress());
      q.map(JobHistoryView.WORKTOTAL, snapshotQ.getWorkTotal());
    }

    /**
     * Implement only if additional join criteria is required.
     */
    protected void buildWhereClause()
    {
      this.getViewQuery().WHERE(historyQ.getJobSnapshot().EQ(snapshotQ));
      this.getViewQuery().AND(jobHistoryRecordQ.childId().EQ(historyQ.getId()).AND(jobHistoryRecordQ.parentId().EQ(execJobQ.getId())));
    }

  }
}
