package com.runwaysdk.system.scheduler;

@com.runwaysdk.business.ClassSignature(hash = 467896879)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to QualifiedTypeJob.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class QualifiedTypeJobBase extends com.runwaysdk.system.scheduler.ExecutableJob
{
  public final static String CLASS = "com.runwaysdk.system.scheduler.QualifiedTypeJob";
  public static java.lang.String CLASSNAME = "className";
  private static final long serialVersionUID = 467896879;
  
  public QualifiedTypeJobBase()
  {
    super();
  }
  
  public String getClassName()
  {
    return getValue(CLASSNAME);
  }
  
  public void validateClassName()
  {
    this.validateAttribute(CLASSNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getClassNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.QualifiedTypeJob.CLASS);
    return mdClassIF.definesAttribute(CLASSNAME);
  }
  
  public void setClassName(String value)
  {
    if(value == null)
    {
      setValue(CLASSNAME, "");
    }
    else
    {
      setValue(CLASSNAME, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static QualifiedTypeJob get(String id)
  {
    return (QualifiedTypeJob) com.runwaysdk.business.Business.get(id);
  }
  
  public static QualifiedTypeJob getByKey(String key)
  {
    return (QualifiedTypeJob) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static QualifiedTypeJob lock(java.lang.String id)
  {
    QualifiedTypeJob _instance = QualifiedTypeJob.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static QualifiedTypeJob unlock(java.lang.String id)
  {
    QualifiedTypeJob _instance = QualifiedTypeJob.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
