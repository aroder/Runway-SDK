/**
 * Copyright (c) 2013 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.system.scheduler;

@com.runwaysdk.business.ClassSignature(hash = 889759497)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ExecutableJob.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ExecutableJobBase extends com.runwaysdk.system.scheduler.AbstractJob
{
  public final static String CLASS = "com.runwaysdk.system.scheduler.ExecutableJob";
  public static java.lang.String DESCRIPTION = "description";
  private com.runwaysdk.business.Struct description = null;
  
  public static java.lang.String ENTRYDATE = "entryDate";
  public static java.lang.String JOBID = "jobId";
  public static java.lang.String RECORDHISTORY = "recordHistory";
  private static final long serialVersionUID = 889759497;
  
  public ExecutableJobBase()
  {
    super();
    description = super.getStruct("description");
  }
  
  public com.runwaysdk.system.scheduler.ExecutableJobDescription getDescription()
  {
    return (com.runwaysdk.system.scheduler.ExecutableJobDescription) description;
  }
  
  public void validateDescription()
  {
    this.validateAttribute(DESCRIPTION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDescriptionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.ExecutableJob.CLASS);
    return mdClassIF.definesAttribute(DESCRIPTION);
  }
  
  public java.util.Date getEntryDate()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(ENTRYDATE));
  }
  
  public void validateEntryDate()
  {
    this.validateAttribute(ENTRYDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getEntryDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.ExecutableJob.CLASS);
    return mdClassIF.definesAttribute(ENTRYDATE);
  }
  
  public void setEntryDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(ENTRYDATE, "");
    }
    else
    {
      setValue(ENTRYDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATETIME_FORMAT).format(value));
    }
  }
  
  public String getJobId()
  {
    return getValue(JOBID);
  }
  
  public void validateJobId()
  {
    this.validateAttribute(JOBID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getJobIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.ExecutableJob.CLASS);
    return mdClassIF.definesAttribute(JOBID);
  }
  
  public void setJobId(String value)
  {
    if(value == null)
    {
      setValue(JOBID, "");
    }
    else
    {
      setValue(JOBID, value);
    }
  }
  
  public Boolean getRecordHistory()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(RECORDHISTORY));
  }
  
  public void validateRecordHistory()
  {
    this.validateAttribute(RECORDHISTORY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getRecordHistoryMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.system.scheduler.ExecutableJob.CLASS);
    return mdClassIF.definesAttribute(RECORDHISTORY);
  }
  
  public void setRecordHistory(Boolean value)
  {
    if(value == null)
    {
      setValue(RECORDHISTORY, "");
    }
    else
    {
      setValue(RECORDHISTORY, java.lang.Boolean.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public com.runwaysdk.system.scheduler.JobHistoryRecord addJobHistory(com.runwaysdk.system.scheduler.JobHistory jobHistory)
  {
    return (com.runwaysdk.system.scheduler.JobHistoryRecord) addChild(jobHistory, com.runwaysdk.system.scheduler.JobHistoryRecord.CLASS);
  }
  
  public void removeJobHistory(com.runwaysdk.system.scheduler.JobHistory jobHistory)
  {
    removeAllChildren(jobHistory, com.runwaysdk.system.scheduler.JobHistoryRecord.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.scheduler.JobHistory> getAllJobHistory()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.scheduler.JobHistory>) getChildren(com.runwaysdk.system.scheduler.JobHistoryRecord.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.scheduler.JobHistoryRecord> getAllJobHistoryRel()
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.scheduler.JobHistoryRecord>) getChildRelationships(com.runwaysdk.system.scheduler.JobHistoryRecord.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.scheduler.JobHistoryRecord> getJobHistoryRel(com.runwaysdk.system.scheduler.JobHistory jobHistory)
  {
    return (com.runwaysdk.query.OIterator<? extends com.runwaysdk.system.scheduler.JobHistoryRecord>) getRelationshipsWithChild(jobHistory, com.runwaysdk.system.scheduler.JobHistoryRecord.CLASS);
  }
  
  public static ExecutableJob get(String id)
  {
    return (ExecutableJob) com.runwaysdk.business.Business.get(id);
  }
  
  public static ExecutableJob getByKey(String key)
  {
    return (ExecutableJob) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public void cancel()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.system.scheduler.ExecutableJob.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void cancel(java.lang.String id)
  {
    ExecutableJob _instance = ExecutableJob.get(id);
    _instance.cancel();
  }
  
  public void pause()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.system.scheduler.ExecutableJob.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void pause(java.lang.String id)
  {
    ExecutableJob _instance = ExecutableJob.get(id);
    _instance.pause();
  }
  
  public void resume()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.system.scheduler.ExecutableJob.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void resume(java.lang.String id)
  {
    ExecutableJob _instance = ExecutableJob.get(id);
    _instance.resume();
  }
  
  public com.runwaysdk.system.scheduler.JobHistory start()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.system.scheduler.ExecutableJob.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final com.runwaysdk.system.scheduler.JobHistory start(java.lang.String id)
  {
    ExecutableJob _instance = ExecutableJob.get(id);
    return _instance.start();
  }
  
  public void stop()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.system.scheduler.ExecutableJob.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void stop(java.lang.String id)
  {
    ExecutableJob _instance = ExecutableJob.get(id);
    _instance.stop();
  }
  
  public static ExecutableJob lock(java.lang.String id)
  {
    ExecutableJob _instance = ExecutableJob.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static ExecutableJob unlock(java.lang.String id)
  {
    ExecutableJob _instance = ExecutableJob.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
